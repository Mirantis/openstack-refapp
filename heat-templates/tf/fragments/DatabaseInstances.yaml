heat_template_version: queens

parameters:

  key_name:
    type: string
    description: Name of keypair to assign to servers
  image:
    type: string
    description: Name of image to use for servers
  flavor:
    type: string
    description: Flavor to use for servers
  server_tags:
    type: json
    description: Tags for servers
    default: ["openstack.lcm.mirantis.com:prober"]
  database_docker_image:
    type: string
  database_subnet_id:
    type: string
  public_network_id:
    type: string
  instance_01_az:
    type: string
    default: 'nova'
  instance_02_az:
    type: string
    default: 'nova'
  instance_03_az:
    type: string
    default: 'nova'
  database_admin_password:
    type: string
  database_disk:
    type: string
  volume_size:
    type: number
    description: The size of volume
    default: 1
  boot_timeout:
    type: number
    description: Boot timeout for instance
    default: 3600
  database_lb_algorithm:
    type: string
    description: Algorithm for Database loadbalancer
    default: SOURCE_IP
  app_database_password:
    type: string
  database_ports_data:
    type: json

resources:

  boot_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - path: /tmp/.service_lib
          content: { get_file: ../../scripts/service_lib }

  software_config_01:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: ../../scripts/service_boot.sh }
          params:
            $node_number: '01'
            $wait_condition_notify: { get_attr: [ wait_handle_01, curl_cli ] }
            $node_01_ip: { get_param: [ database_ports_data, 0, port, fixed_ips, 0, ip_address ] }
            $node_02_ip: { get_param: [ database_ports_data, 1, port, fixed_ips, 0, ip_address ] }
            $node_03_ip: { get_param: [ database_ports_data, 2, port, fixed_ips, 0, ip_address ] }
            $database_admin_password: { get_param: database_admin_password }
            $database_disk: { get_param: database_disk }
            $database_docker_image: { get_param: database_docker_image }
            $app_database_password: { get_param: app_database_password }
            $service_type: "database"

  install_config_agent_01:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
      - config: {get_resource: boot_config}
      - config: {get_resource: software_config_01}

  software_config_02:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: ../../scripts/service_boot.sh }
          params:
            $node_number: '02'
            $wait_condition_notify: { get_attr: [ wait_handle_0x, curl_cli ] }
            $node_01_ip: { get_param: [ database_ports_data, 0, port, fixed_ips, 0, ip_address ] }
            $node_02_ip: { get_param: [ database_ports_data, 1, port, fixed_ips, 0, ip_address ] }
            $node_03_ip: { get_param: [ database_ports_data, 2, port, fixed_ips, 0, ip_address ] }
            $database_admin_password: { get_param: database_admin_password }
            $database_disk: { get_param: database_disk }
            $database_docker_image: { get_param: database_docker_image }
            $app_database_password: { get_param: app_database_password }
            $service_type: "database"

  install_config_agent_02:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
      - config: {get_resource: boot_config}
      - config: {get_resource: software_config_02}

  software_config_03:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: ../../scripts/service_boot.sh }
          params:
            $node_number: '03'
            $wait_condition_notify: { get_attr: [ wait_handle_0x, curl_cli ] }
            $node_01_ip: { get_param: [ database_ports_data, 0, port, fixed_ips, 0, ip_address ] }
            $node_02_ip: { get_param: [ database_ports_data, 1, port, fixed_ips, 0, ip_address ] }
            $node_03_ip: { get_param: [ database_ports_data, 2, port, fixed_ips, 0, ip_address ] }
            $database_admin_password: { get_param: database_admin_password }
            $database_disk: { get_param: database_disk }
            $database_docker_image: { get_param: database_docker_image }
            $app_database_password: { get_param: app_database_password }
            $service_type: "database"

  install_config_agent_03:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
      - config: {get_resource: boot_config}
      - config: {get_resource: software_config_03}

  db_group:
   type: OS::Nova::ServerGroup
   properties:
     name:  "db-group"
     policies: [ 'soft-anti-affinity' ]

  server-01:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      availability_zone: { get_param: instance_01_az }
      networks:
        - port: { get_param: [ database_ports_data, 0, id ] }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource:  install_config_agent_01}
      tags: { get_param: server_tags }
      scheduler_hints:
        group: { get_resource: db_group }

  server-02:
    depends_on:
      - wait_condition_01
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      availability_zone: { get_param: instance_02_az }
      networks:
        - port: { get_param: [ database_ports_data, 1, id ] }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource:  install_config_agent_02}
      tags: { get_param: server_tags }
      scheduler_hints:
        group: { get_resource: db_group }

  server-03:
    depends_on:
      - wait_condition_01
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      availability_zone: { get_param: instance_03_az }
      networks:
        - port: { get_param: [ database_ports_data, 2, id ] }
      user_data_format: SOFTWARE_CONFIG
      user_data: { get_resource:  install_config_agent_03}
      tags: { get_param: server_tags }
      scheduler_hints:
        group: { get_resource: db_group }

  server_01_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_network_id }
      port_id: { get_param: [ database_ports_data, 0, id ] }

  server_02_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_network_id }
      port_id: { get_param: [ database_ports_data, 1, id ] }

  server_03_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_network_id }
      port_id: { get_param: [ database_ports_data, 2, id ] }

  vol_01:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }

  vol_01_attach:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: server-01 }
      volume_id: { get_resource: vol_01 }
      mountpoint: /dev/vdb

  vol_02:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }

  vol_02_attach:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: server-02 }
      volume_id: { get_resource: vol_02 }
      mountpoint: /dev/vdb

  vol_03:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }

  vol_03_attach:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: server-03 }
      volume_id: { get_resource: vol_03 }
      mountpoint: /dev/vdb

  wait_handle_01:
    type: OS::Heat::WaitConditionHandle
  wait_condition_01:
    depends_on:
      - server-01
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle_01 }
      timeout: { get_param: boot_timeout }
      count: 1

  wait_handle_0x:
    type: OS::Heat::WaitConditionHandle
  wait_condition_0x:
    depends_on:
      - server-02
      - server-03
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle_0x }
      timeout: { get_param: boot_timeout }
      count: 2

  lb:
    type: OS::Octavia::LoadBalancer
    properties:
      vip_subnet: { get_param: database_subnet_id }

  listener:
    type: OS::Octavia::Listener
    properties:
      loadbalancer: {get_resource: lb}
      protocol: TCP
      protocol_port: 3306

  pool:
    type: OS::Octavia::Pool
    properties:
      listener: {get_resource: listener}
      lb_algorithm: {get_param: database_lb_algorithm}
      protocol: TCP
      session_persistence:
        type: SOURCE_IP

  lb_monitor:
    type: OS::Octavia::HealthMonitor
    properties:
      pool: { get_resource: pool }
      type: TCP
      delay: 5
      max_retries: 5
      timeout: 5

  pool_member1:
    type: OS::Octavia::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ server-01, first_address ]}
      protocol_port: 3306
      subnet: { get_param: database_subnet_id }

  pool_member2:
    type: OS::Octavia::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ server-02, first_address ]}
      protocol_port: 3306
      subnet: { get_param: database_subnet_id }

  pool_member3:
    type: OS::Octavia::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ server-03, first_address ]}
      protocol_port: 3306
      subnet: { get_param: database_subnet_id }

outputs:
  database_vip:
    description: VIP address of database
    value: { get_attr: [lb, vip_address ] }
  database_floating_ips:
    description: Database instances floating IPs
    value: [ {get_attr: [ server_01_floating_ip, floating_ip_address ]}, {get_attr: [ server_02_floating_ip, floating_ip_address ]}, {get_attr: [ server_03_floating_ip, floating_ip_address ]}]
